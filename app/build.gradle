apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId "com.iamzzj.one"
        minSdkVersion 17
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }

    /**
     * 修改java，jniLibs，xml的路径
     */
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            res.srcDirs = ['src/main/res',
                           'src/main/res-ad',
                           'src/main/res-player']
        }
    }
}

this.android.sourceSets {}
/**
 * 为应用程序添加第三方库的依赖
 */
dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

}

/**
 * 配置阶段开始前的监听回调
 */
this.beforeEvaluate {
    println '配置阶段执行开始...'
}

/**
 * 配置阶段完成后的回调
 */
this.afterEvaluate {
    println '配置阶段执行完毕...'
}

/**
 * gradle执行完毕后的回调监听
 */
this.gradle.buildFinished {
    println '执行阶段执行完毕...'
}

this.gradle.beforeProject {
    println '配置阶段执行开始 = beforeEvaluate'
}

this.gradle.afterProject {
    println '配置阶段执行完毕 = afterEvaluate'

//    this.android.applicationVariants.all { variant ->
//        def output = variant.outputs.first();
//        def apkName = "app-${variant.baseName}" +
//                "-${variant.versionName}.apk"
//        output.outputFile = new File(output.outputFile.parent,
//            apkName)
//    }
}

//copy {
//    from file('build/outputs/apk/')
//    into getRootProject().getBuildDir().path +"/apk/"
//    exclude {}
//    rename {}
//}

//fileTree('build/outputs/apk/') { FileTree fileTree ->
//    fileTree.visit {FileTreeElement element ->
//        println 'this file name is:' +element.file.name
//
//        copy {
//            from element.file
//            into getRootProject().getBuildDir().path + '/test/'
//        }
//    }
//}

task apkcopy {
    /**
     * 执行阶段执行
     */
    doLast {
        def sourcePath = this.buildDir.path + '/outputs/apk/'
        def desationPath = '/Users/z/Downloads/'
        def command = "mv -f ${sourcePath} ${desationPath}"

        exec {
            try {
                executable 'bash'
                args '-c', command
                println 'this command is execute success'
            } catch (GradleException e) {
                println 'this command is execute failed'
            }
        }
    }
}